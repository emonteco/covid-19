{"version":3,"sources":["constants/index.js","redux/stats/actions.js","redux/stats/types.js","redux/countries/actions.js","redux/countries/types.js","components/Header/index.js","components/Card/index.js","utils/numbers.js","utils/strings.js","components/Stats/index.js","components/WorldStats/index.js","components/Country/index.js","components/WorldMap/index.js","components/CountryStats/index.js","components/Footer/index.js","App.js","config/serviceWorker.js","redux/countries/reducer.js","redux/stats/reducer.js","config/configureStore.js","index.js"],"names":["API","getWorldStatsSuccess","data","type","getCountriesStatsSuccess","getCountriesSuccess","Header","className","Card","title","number","percentage","color","toString","replace","defaultProps","getNumberString","getPercentageString","value","total","toFixed","Stats","confirmed","recovered","deaths","lastUpdate","verticalLayout","lastUpdateString","moment","fromNow","confirmedString","recoveredString","deathsString","recoveredPercentageString","deathsPercentageString","cssClass","WorldStats","worldStats","useSelector","state","stats","world","Country","countries","selected","onChange","event","target","map","country","key","iso2","name","WorldMap","onClick","currentLayers","toLowerCase","layerProps","attributes","id","toUpperCase","tabIndex","CountryStats","dispatch","useDispatch","countriesStats","list","selectedCountry","selectedCountryStats","find","handleChangeCountry","selectCountry","Footer","rel","href","App","useEffect","a","fetch","response","status","json","error","Boolean","window","location","hostname","match","initialState","loading","profile","action","loadingWorldStats","loadingCountriesStats","middlewares","thunk","preloadedState","store","createStore","combineReducers","countriesReducer","statsReducer","compose","applyMiddleware","f","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.63fb2b0e.chunk.js","sourcesContent":["export const API = 'https://covid19.mathdro.id/api';","import {\n  GET_WORLD_STATS_REQUEST,\n  GET_WORLD_STATS_SUCCESS,\n  GET_WORLD_STATS_FAILURE,\n  GET_COUNTRIES_STATS_REQUEST,\n  GET_COUNTRIES_STATS_SUCCESS,\n  GET_COUNTRIES_STATS_FAILURE,\n} from './types';\nimport { API } from '../../constants';\n\nexport function getWorldStatsRequest() {\n  return {\n    type: GET_WORLD_STATS_REQUEST,\n  };\n}\n\nexport function getWorldStatsSuccess(data) {\n  return {\n    type: GET_WORLD_STATS_SUCCESS,\n    data,\n  };\n}\n\nexport function getWorldStatsFailure(error) {\n  return {\n    type: GET_WORLD_STATS_FAILURE,\n    error,\n  };\n}\n\nexport function getCountriesStatsRequest() {\n  return {\n    type: GET_COUNTRIES_STATS_REQUEST,\n  };\n}\n\nexport function getCountriesStatsSuccess(data) {\n  return {\n    type: GET_COUNTRIES_STATS_SUCCESS,\n    data,\n  };\n}\n\nexport function getCountriesStatsFailure(error) {\n  return {\n    type: GET_COUNTRIES_STATS_FAILURE,\n    error,\n  };\n}\n\nexport function getWorldStats() {\n  return async (dispatch) => {\n    dispatch(getWorldStatsRequest());\n    try {\n      const response = await fetch(API);\n      if (response.status >= 300) {\n        throw response.status;\n      } else {\n        const data = await response.json();\n        dispatch(getWorldStatsSuccess(data));\n      }\n    } catch (error) {\n      dispatch(getWorldStatsFailure(error));\n    }\n  };\n}\n\nexport function getCountriesStats() {\n  return async (dispatch) => {\n    dispatch(getCountriesStatsRequest());\n    try {\n      const response = await fetch(`${API}/confirmed`);\n      if (response.status >= 300) {\n        throw response.status;\n      } else {\n        const data = await response.json();\n        dispatch(getCountriesStatsSuccess(data));\n      }\n    } catch (error) {\n      dispatch(getCountriesStatsFailure(error));\n    }\n  };\n}\n","export const GET_WORLD_STATS_REQUEST = 'GET_WORLD_STATS_REQUEST';\nexport const GET_WORLD_STATS_SUCCESS = 'GET_WORLD_STATS_SUCCESS';\nexport const GET_WORLD_STATS_FAILURE = 'GET_WORLD_STATS_FAILURE';\nexport const GET_COUNTRIES_STATS_REQUEST = 'GET_COUNTRIES_STATS_REQUEST';\nexport const GET_COUNTRIES_STATS_SUCCESS = 'GET_COUNTRIES_STATS_SUCCESS';\nexport const GET_COUNTRIES_STATS_FAILURE = 'GET_COUNTRIES_STATS_FAILURE';\n","import {\n  GET_COUNTRIES_REQUEST,\n  GET_COUNTRIES_SUCCESS,\n  GET_COUNTRIES_FAILURE,\n  SELECT_COUNTRY,\n} from './types';\nimport { API } from '../../constants';\n\nexport function getCountriesRequest() {\n  return {\n    type: GET_COUNTRIES_REQUEST,\n  };\n}\n\nexport function getCountriesSuccess(data) {\n  return {\n    type: GET_COUNTRIES_SUCCESS,\n    data,\n  };\n}\n\nexport function getCountriesFailure(error) {\n  return {\n    type: GET_COUNTRIES_FAILURE,\n    error,\n  };\n}\n\nexport function selectCountry(country) {\n  return {\n    type: SELECT_COUNTRY,\n    country,\n  };\n}\n\nexport function getCountries() {\n  return async (dispatch) => {\n    dispatch(getCountriesRequest());\n    try {\n      const response = await fetch(`${API}/countries`);\n      if (response.status >= 300) {\n        throw response.status;\n      } else {\n        const data = await response.json();\n        dispatch(getCountriesSuccess(data && data.countries));\n      }\n    } catch (error) {\n      dispatch(getCountriesFailure(error));\n    }\n  };\n}\n","export const GET_COUNTRIES_REQUEST = 'GET_COUNTRIES_REQUEST';\nexport const GET_COUNTRIES_SUCCESS = 'GET_COUNTRIES_SUCCESS';\nexport const GET_COUNTRIES_FAILURE = 'GET_COUNTRIES_FAILURE';\nexport const SELECT_COUNTRY = 'SELECT_COUNTRY';\n","import React from 'react';\n\nconst Header = () => (\n  <header className=\"container pt-4\">\n    <h1>COVID-19</h1>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Card.css';\nimport { formatNumber } from '../../utils/numbers';\n\nconst Card = ({\n  title, number, percentage, color,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-body\">\n      <h3 className={`m-0 text-${color}`}>\n        {formatNumber(number)}\n        {percentage && <small className=\"text-muted ml-1\">{percentage}</small>}\n      </h3>\n      <p className=\"m-0\">\n        {title}\n      </p>\n    </div>\n  </div>\n);\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  number: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  percentage: PropTypes.string,\n  color: PropTypes.string\n};\n\nCard.defaultProps = {\n  percentage: null,\n  color: 'primary',\n};\n\nexport default Card;\n","export const formatNumber = (num) => num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n","export const getNumberString = (number) => ((typeof number === 'number') ? number : '-');\n\nexport const getPercentageString = (value, total) => (typeof value === 'number' && typeof total === 'number' && `(${((value / total) * 100).toFixed(2)}%)`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nimport Card from '../Card';\nimport { getNumberString, getPercentageString } from '../../utils/strings';\n\nconst Stats = ({\n  confirmed, recovered, deaths, lastUpdate, verticalLayout,\n}) => {\n  const lastUpdateString = (lastUpdate && moment(lastUpdate).fromNow()) || '-';\n  const confirmedString = getNumberString(confirmed);\n  const recoveredString = getNumberString(recovered);\n  const deathsString = getNumberString(deaths);\n  const recoveredPercentageString = getPercentageString(recovered, confirmed);\n  const deathsPercentageString = getPercentageString(deaths, confirmed);\n  const cssClass = verticalLayout ? 'col-sm-12 mb-2' : 'col-sm-12 col-md-4 mb-2';\n\n  return (\n    <div className=\"world-stats\">\n      <div className=\"row\">\n        <div className={cssClass}>\n          <Card\n            title=\"Confirmed\"\n            number={confirmedString}\n            color=\"warning\"\n          />\n        </div>\n        <div className={cssClass}>\n          <Card\n            title=\"Recovered\"\n            number={recoveredString}\n            percentage={recoveredPercentageString}\n            color=\"success\"\n          />\n        </div>\n        <div className={cssClass}>\n          <Card\n            title=\"Deaths\"\n            number={deathsString}\n            percentage={deathsPercentageString}\n            color=\"danger\"\n          />\n        </div>\n      </div>\n      <small className=\"text-muted\">{`Last update: ${lastUpdateString}`}</small>\n    </div>\n  );\n};\n\nStats.propTypes = {\n  confirmed: PropTypes.number,\n  recovered: PropTypes.number,\n  deaths: PropTypes.number,\n  lastUpdate: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  verticalLayout: PropTypes.bool,\n};\n\nStats.defaultProps = {\n  confirmed: null,\n  recovered: null,\n  deaths: null,\n  lastUpdate: '',\n  verticalLayout: false,\n};\n\nexport default Stats;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Stats from '../Stats';\n\nconst WorldStats = () => {\n  const worldStats = useSelector((state) => state.stats.world);\n\n  return (\n    <div className=\"world-stats container mt-4\">\n      <h2 className=\"h4\">World Stats</h2>\n      <Stats\n        confirmed={worldStats && worldStats.confirmed && worldStats.confirmed.value}\n        recovered={worldStats && worldStats.recovered && worldStats.recovered.value}\n        deaths={worldStats && worldStats.deaths && worldStats.deaths.value}\n        lastUpdate={worldStats && worldStats.lastUpdate}\n      />\n    </div>\n  );\n};\n\nexport default WorldStats;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Country = ({ countries, selected, onChange }) => {\n  const handleChange = (event) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <div className=\"country row mb-4\">\n      <div className=\"col-12\">\n        <select value={selected} onChange={handleChange} className=\"form-control\">\n          <option>{}</option>\n          {\n            countries.map((country) => (\n              <option key={country.iso2} value={country.iso2}>{country.name}</option>\n            ))\n          }\n        </select>\n      </div>\n    </div>\n  );\n};\n\nCountry.propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    iso2: PropTypes.string,\n  })).isRequired,\n  selected: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nCountry.defaultProps = {\n  selected: null,\n};\n\nexport default Country;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { VectorMap } from '@south-paw/react-vector-maps';\n\nimport world from '../../maps/world.json';\n\nconst WorldMap = ({ onClick, selected }) => {\n  const currentLayers = [selected && selected.toLowerCase()];\n  const layerProps = {\n    onClick: ({ target }) => onClick(target.attributes.id.value.toUpperCase()),\n  };\n\n  return (\n    <VectorMap\n      {...world}\n      layerProps={layerProps}\n      currentLayers={currentLayers}\n      tabIndex={-1}\n    />\n  );\n};\n\nWorldMap.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  selected: PropTypes.string,\n};\n\nWorldMap.defaultProps = {\n  selected: null,\n};\n\nexport default WorldMap;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectCountry } from '../../redux/countries/actions';\nimport Stats from '../Stats';\nimport Country from '../Country';\nimport WorldMap from '../WorldMap';\n\nconst CountryStats = () => {\n  const dispatch = useDispatch();\n  const countriesStats = useSelector((state) => state.stats.countries);\n  const countries = useSelector((state) => state.countries.list);\n  const selectedCountry = useSelector((state) => state.countries.selected);\n  const selectedCountryStats = countriesStats.find((country) => country.iso2 === selectedCountry);\n\n  const handleChangeCountry = (country) => {\n    dispatch(selectCountry(country));\n  };\n\n  return (\n    <div className=\"country-stats container mt-4 mt-md-5\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-9\">\n          <WorldMap onClick={handleChangeCountry} selected={selectedCountry} />\n        </div>\n        <div className=\"col-sm-12 col-md-3 mt-3 mt-md-0\">\n          <h2 className=\"h4\">Country</h2>\n          <Country\n            countries={countries}\n            selected={selectedCountry}\n            onChange={handleChangeCountry}\n          />\n          <Stats\n            confirmed={selectedCountryStats && selectedCountryStats.confirmed}\n            recovered={selectedCountryStats && selectedCountryStats.recovered}\n            deaths={selectedCountryStats && selectedCountryStats.deaths}\n            lastUpdate={selectedCountryStats && selectedCountryStats.lastUpdate}\n            verticalLayout\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryStats;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"small text-center py-2 mt-5\">\n    API:&nbsp;\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/mathdroid/covid-19-api\">COVID-19 API</a>\n    &nbsp;| Dev: &nbsp;\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/emmanuelmontenegro/\">Emmanuel Montenegro</a>\n  </footer>\n);\n\nexport default Footer;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { getWorldStats, getCountriesStats } from './redux/stats/actions';\nimport { getCountries } from './redux/countries/actions';\nimport Header from './components/Header';\nimport WorldStats from './components/WorldStats';\nimport CountryStats from './components/CountryStats';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCountries());\n    dispatch(getWorldStats());\n    dispatch(getCountriesStats());\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <WorldStats />\n      <CountryStats />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  GET_COUNTRIES_REQUEST,\n  GET_COUNTRIES_SUCCESS,\n  GET_COUNTRIES_FAILURE,\n  SELECT_COUNTRY,\n} from './types';\n\nconst initialState = {\n  loading: false,\n  list: [],\n  selected: null,\n};\n\nexport default function profile(state = initialState, action) {\n  switch (action.type) {\n    case GET_COUNTRIES_REQUEST: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n\n    case GET_COUNTRIES_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n        list: action.data,\n      };\n    }\n\n    case GET_COUNTRIES_FAILURE: {\n      return {\n        ...state,\n        loading: false,\n        error: action.error,\n      };\n    }\n\n    case SELECT_COUNTRY: {\n      return {\n        ...state,\n        selected: action.country,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import {\n  GET_WORLD_STATS_REQUEST,\n  GET_WORLD_STATS_SUCCESS,\n  GET_WORLD_STATS_FAILURE,\n  GET_COUNTRIES_STATS_REQUEST,\n  GET_COUNTRIES_STATS_SUCCESS,\n  GET_COUNTRIES_STATS_FAILURE,\n} from './types';\n\nconst initialState = {\n  loadingWorldStats: false,\n  loadingCountriesStats: false,\n  world: {},\n  countries: [],\n};\n\nexport default function profile(state = initialState, action) {\n  switch (action.type) {\n    case GET_WORLD_STATS_REQUEST: {\n      return {\n        ...state,\n        loadingWorldStats: true,\n      };\n    }\n\n    case GET_WORLD_STATS_SUCCESS: {\n      return {\n        ...state,\n        loadingWorldStats: false,\n        world: action.data,\n      };\n    }\n\n    case GET_WORLD_STATS_FAILURE: {\n      return {\n        ...state,\n        loadingWorldStats: false,\n        error: action.error,\n      };\n    }\n\n    case GET_COUNTRIES_STATS_REQUEST: {\n      return {\n        ...state,\n        loadingCountriesStats: true,\n      };\n    }\n\n    case GET_COUNTRIES_STATS_SUCCESS: {\n      return {\n        ...state,\n        loadingCountriesStats: false,\n        countries: action.data,\n      };\n    }\n\n    case GET_COUNTRIES_STATS_FAILURE: {\n      return {\n        ...state,\n        loadingCountriesStats: false,\n        error: action.error,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import {\n  applyMiddleware, compose, createStore, combineReducers,\n} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport countriesReducer from '../redux/countries/reducer';\nimport statsReducer from '../redux/stats/reducer';\n\nconst DEBUG = (process.env.NODE_ENV === 'development');\n\nconst createRootReducer = () => combineReducers({\n  countries: countriesReducer,\n  stats: statsReducer,\n});\n\nconst middlewares = [thunk];\n\nif (DEBUG) {\n  const loggerMiddleware = createLogger();\n  middlewares.push(loggerMiddleware);\n}\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    createRootReducer(),\n    preloadedState,\n    compose(\n      applyMiddleware(...middlewares),\n      DEBUG && window.devToolsExtension\n        ? window.devToolsExtension()\n        : (f) => f,\n    ),\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './config/serviceWorker';\nimport configureStore from './config/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}